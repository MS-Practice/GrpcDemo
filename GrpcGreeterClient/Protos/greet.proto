syntax = "proto3";
import "google/protobuf/any.proto"; // Any 包装任何类
import "google/protobuf/empty.proto";

option csharp_namespace = "GrpcDemo";

package Greet;

// The greeting service definition.
service Greeter {
  // Sends a greeting
  rpc SayHello (HelloRequest) returns (HelloReply);
  // 对于无参的 service 方法,官方建议都要传参数,如果没有参数,就传一个代表空的参数(message)
  // 具体连接详见:https://stackoverflow.com/questions/31768665/can-i-define-a-grpc-call-with-a-null-request-or-response
  rpc OneofReturnValue(google.protobuf.Empty) returns (ResponseMessage);
}

// The request message containing the user's name.
message HelloRequest {
  string name = 1;
}

// The response message containing the greetings.
message HelloReply {
  string message = 1;
}

service ExampleService {
  /* 这个很想 mvc 控制器中的 action
     但是有一个很大的不同就是 grpc 的方法不能将请求的各个部分绑定到方法对应的参数
  */
  // 一元
  rpc UnaryCall (ExampleRequest) returns (ExampleResponse);
  /* 服务端流
  * 对于连续的流，如果客户端不再需要，那么可以进行取消操作
  * 客户端就会发送一个信号通知服务操作取消，调用 ServerCallContext.CancellationToken 触发。
  */ 
  rpc StreamingFromServer (ExampleRequest) returns (stream ExampleResponse);
  // 客户端流
  rpc StreamingFromClient (stream ExampleRequest) returns (ExampleResponse);
  // 双向绑定流
  rpc StreamingBothWays (stream ExampleRequest) returns (stream ExampleResponse);
}

message ExampleRequest {
  int32 pageIndex = 1;
  int32 pageSize = 2;
  bool isDescending = 3;
}

message ExampleResponse {

}

message Status {
    string message = 1;
    google.protobuf.Any detail = 2;
}

// oneof 其中一个
message Person {

}
message Error {

}

message ResponseMessage {
    // 返回 Person or Error
    oneof result {
        Person person = 1;
        Error error = 2;
    }
}
