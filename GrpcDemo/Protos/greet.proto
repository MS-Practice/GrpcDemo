syntax = "proto3";
import "google/protobuf/duration.proto";    // 对应 .NET 时间格式，Timespan
import "google/protobuf/timestamp.proto";   // 对应 .NET 时间格式，DateTimeOffset、DateTime
import "google/protobuf/wrappers.proto";
import "google/protobuf/any.proto"; // Any 包装任何类

option csharp_namespace = "GrpcDemo";

package Greet;

// The greeting service definition.
service Greeter {
  // Sends a greeting
  rpc SayHello (HelloRequest) returns (HelloReply);
}

// The request message containing the user's name.
message HelloRequest {
  string name = 1;
}

// The response message containing the greetings.
message HelloReply {
  string message = 1;
}

service ExampleService {
  /* 这个很想 mvc 控制器中的 action
     但是有一个很大的不同就是 grpc 的方法不能将请求的各个部分绑定到方法对应的参数
  */
  // 一元
  rpc UnaryCall (ExampleRequest) returns (ExampleResponse);
  /* 服务端流
  * 对于连续的流，如果客户端不再需要，那么可以进行取消操作
  * 客户端就会发送一个信号通知服务操作取消，调用 ServerCallContext.CancellationToken 触发。
  */ 
  rpc StreamingFromServer (ExampleRequest) returns (stream ExampleResponse);
  // 客户端流
  rpc StreamingFromClient (stream ExampleRequest) returns (ExampleResponse);
  // 双向绑定流
  rpc StreamingBothWays (stream ExampleRequest) returns (stream ExampleResponse);
}

message ExampleRequest {
  int32 pageIndex = 1;
  int32 pageSize = 2;
  bool isDescending = 3;
}

message ExampleResponse {

}

message Meeting {
    string subject = 1;
    google.protobuf.Timestamp start = 2;
    google.protobuf.Duration duration = 3;
}

// 可空类型
message PersonNullale {
    google.protobuf.Int32Value age = 5; // 对应 int?
}

message ListType {
    repeated string roles = 1;  // 对应集合类,生成 RepeatedField<T>,它派生自 IList<T>
}

message Status {
    string message = 1;
    google.protobuf.Any detail = 2;
}